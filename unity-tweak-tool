#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Team:
#   J Phani Mahesh <phanimahesh@gmail.com> 
#   Barneedhar (jokerdino) <barneedhar@ubuntu.com> 
#   Amith KK <amithkumaran@gmail.com>
#   Georgi Karavasilev <motorslav@gmail.com>
#   Sam Tran <samvtran@gmail.com>
#   Sam Hewitt <hewittsamuel@gmail.com>
#
# Description:
#   A One-stop configuration tool for Unity.
#
# Legal Stuff:
#
# This file is a part of Unity Tweak Tool
#
# Unity Tweak Tool is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# Unity Tweak Tool is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <https://www.gnu.org/licenses/gpl-3.0.txt>

import os, os.path, argparse

from gi.repository import Gtk, Gio

from unitytweak.ui import ui
from unitytweak.start import Startpage
from unitytweak.unity import Unitysettings
from unitytweak.compiz import Compizsettings
from unitytweak.theme import Themesettings
from unitytweak.desktop import Desktopsettings
from unitytweak.about import About
from unitytweak import settings

class UnityTweak ():
    def __init__(self):
        '''Handler Initialisations.
        Obtain all references here.'''
        self.builder = Gtk.Builder()
        self.glade = (os.path.join(settings.UI_DIR,
                                    'unitytweak.ui'))
        self.builder.add_from_file(self.glade)
        self.ui = ui(self.builder)

        self.builder.connect_signals(self)
        self.ui['unitytweak_main'].set_resizable(False)

        self.notebook = self.ui['nb_unitytweak']

        self.startpage = Startpage(self.ui, self.notebook)
        self.unitysettings = Unitysettings(self.ui)
        self.compizsettings = Compizsettings(self.ui)
        self.themesettings = Themesettings(self.ui)
        self.desktopsettings = Desktopsettings(self.ui)

        self.notebook.append_page(self.startpage.page, None)
        self.notebook.append_page(self.unitysettings.page, None)
        self.notebook.append_page(self.compizsettings.page, None)
        self.notebook.append_page(self.themesettings.page, None)
        self.notebook.append_page(self.desktopsettings.page, None)

        self.ui['unitytweak_main'].show_all()
        self.ui['unitytweak_main'].connect("delete-event", Gtk.main_quit)

        #---------- Command line options: Start ----------------------

        parser = argparse.ArgumentParser()

        parser.add_argument('-u', '--unity', help='Start in the Unity tab', action='store_true')
        parser.add_argument('-w', '--winmng', help='Start in the WindowManager tab', action='store_true')
        parser.add_argument('-a', '--appereance', help='Start in the appereance tab', action='store_true')
        parser.add_argument('-s', '--system', help='Start in the system tab', action='store_true')
        parser.add_argument('-r', '--restore', help='Restore settings to its defaults values', action='store_true')

        args = parser.parse_args()

        if args.unity:
            self.ui['tool_unitysettings'].set_active(True)            
        elif args.winmng:
            self.ui['tool_compizsettings'].set_active(True)            
        elif args.appereance:
            self.ui['tool_themesettings'].set_active(True)        
        elif args.system:
            self.ui['tool_desktopsettings'].set_active(True)            
        elif args.restore:
            #TODO : Restore everything in one call
            print()

        #----------- Command line options: End -----------------------

        Gtk.main()
        
    # ===== Menu Bar ====
    

    # ===== Top Navigation bar =====
    def on_tool_startpage_toggled(self,udata):
        self.notebook.set_current_page(0)
    def on_tool_unitysettings_toggled(self,udata):
        self.notebook.set_current_page(1)
        self.unitysettings.page.set_current_page(0)
    def on_tool_compizsettings_toggled(self,udata):
        self.notebook.set_current_page(2)
        self.compizsettings.page.set_current_page(0)
    def on_tool_themesettings_toggled(self,udata):
        self.notebook.set_current_page(3)
        self.themesettings.page.set_current_page(0)
    def on_tool_desktopsettings_toggled(self,udata):
        self.notebook.set_current_page(4)



    # gtk search box

    # inserting text shows the secondary icon (stock-clear)

    def on_tool_entry_search_insert_text(self,text,length,position,udata):

        # getting the text length to workaround some Gtk bug
        if self.ui['tool_entry_search'].get_text_length()+1:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY,
                Gtk.STOCK_CLEAR)

        else:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

    def on_tool_entry_search_delete_text(self,start_pos,end_pos,udata):

        # getting the text length to workaround some Gtk bug

        if (self.ui['tool_entry_search'].get_text_length()-1) == 0:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

    # clicking on secondary icon clearing text

    def on_tool_entry_search_icon_press(self, widget, icon, mouse_button):

        if icon == Gtk.EntryIconPosition.SECONDARY:
            widget.set_text("")
            widget.set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

        if icon == Gtk.EntryIconPosition.PRIMARY:
            print("Searching")

    # setting up menus

    def on_menuimage_about_activate(self, widget):
        self.about = About(self.ui)

    def on_menuimage_quit_activate(self, widget):
        Gtk.main_quit()

if __name__=='__main__':
# Fire up the Engines
    UnityTweak()
else:
    print("WARNING: This module is not tailored to be imported. Proceed at your own risk.")
